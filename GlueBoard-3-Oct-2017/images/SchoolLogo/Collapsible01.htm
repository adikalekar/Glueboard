<html>
<head>
<script src="http://d3js.org/d3.v3.min.js"></script>
	<meta http-equiv='X-UA-Compatible' content='IE=edge' />
	<meta http-equiv='Content-Type' content='text/html;charset=UTF-8'/>
	<scrip scr="main.css"></scrip>
	<style>
    .dennisseah-orgchart .node {
        cursor: pointer;
    }
    .dennisseah-orgchart .node circle {
        fill: #fff;
        stroke: steelblue;
        stroke-width: 1.5px;        
    }
    
    
        .land {
  font: 13px sans-serif;
}
        .title{
    color : #F7931E;
   font: 13px sans-serif;
            text-decoration: underline;
  
}
     .link {
        fill: none;
        stroke: #ccc;
        stroke-width: 1.5px;
    }
    
    .dennisseah-orgchart {
        overflow: hidden;
    }
	</style>
	
	<script>
   
    
       
          var root = {
        name: '87521',
        children: [
            {name: '56999 Communication Manager', color:'red'},
            {name: '87252', color:'red'},
             {name: '87252', color:'red'},
             {name: '87252', color:'red'},
             {name: '87252', color:'red'},
            {name: '66224', children: [{name: '87253',children: [{name: '87253'}]}]},
            {name: '70043', children: [{name: '70044'}]},
            {name: '87240'},            
        ]
      };
        debugger;
          var margin = {
            top: 20,
            right: 120,
            bottom: 20,
            left: 120
          };
          var width = 1000 - margin.right - margin.left;
          var height = 800 - margin.top - margin.bottom;
    
          var i = 0,
              duration = 750,
              rectW = 180,
              rectH = 100;
    
          var tree = d3.layout.tree().nodeSize([200]);
          var diagonal = d3.svg.diagonal()
          .projection(function (d) {
            return [d.x + rectW / 2, d.y + rectH / 2];
          });
    
          var svg = d3.select("body")
          .append("svg")
          .attr("width", 1400)
          .attr("height", 780)
          .call(zm = d3.behavior.zoom().scaleExtent([1,3])
                //.on("zoom", redraw)
               ).append("g")
          .attr("transform", "translate(" + (600) + "," + 120 + ")");
    
          zm.translate([50, 20]);
    
          root.x0 = 0;
          root.y0 = height / 2;
          
          function collapse(d) {
            if (d.children) {
              d._children = d.children;
              d._children.forEach(collapse);
              d.children = null;
            }
          }
    
          root.children.forEach(collapse);
          update(root);
          d3.select("#body").style("height", "800px");
    
          function update(source) {
            var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);
    
            nodes.forEach(function (d) {
              d.y = d.depth * 280;
            });
    
            var node = svg.selectAll("g.node")
            .data(nodes, function (d) {
              return d.id || (d.id = ++i);
            });
    
            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .attr("transform", function (d) {
              return "translate(" + source.x0 + "," + source.y0 + ")";
            })
            .on("click", click);
    
            nodeEnter.append("rect")
            .attr("width", rectW)
            .attr("id", function (d) {
                 return d.name;})
            .attr("height", rectH)
            .attr("stroke", "black")
            .attr("stroke-width", 1)
            .style("fill", function (d) {
                
              return d._children ? "lightsteelblue" : "#fff";
                
            });
    
              nodeEnter.append('foreignObject')
                        .attr("x", 45)
                        .attr("y",25)
                        .attr("class", "land")
                        .attr("text-anchor", "middle")
                        .append("xhtml:body")
                        .html(function (d) {
              return d.name;
            });
              
               nodeEnter.append("text")
            .attr("x", 20)
            .attr("y", 85)
            .attr("dy", ".35em")
               .attr("class", "title")
			.attr("alignment-baseline","middle")
            .attr("text-anchor", "middle")
            .text(function (d) {
              return "Edit";
            }).on("click", function(d) { 
                   
                 var circleSelected = svg.select("rect[id='"+d.name+"']");
                   circleSelected.style("fill", "green");
                 
                 });
              
               nodeEnter.append("text")
            .attr("x", 154)
            .attr("y", 85)
                .attr("class", "title")
            .attr("dy", ".35em")
			.attr("alignment-baseline","middle")
            .attr("text-anchor", "middle")
            .text(function (d) {
              return "Details";
            }).on("click", function(d) { alert("Hello Details"); });;
           
    
            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + d.x + "," + d.y + ")";
            });
    
            nodeUpdate.select("rect")
            .attr("width", rectW)
            .attr("height", rectH)
            .attr("stroke", "black")
            .attr("stroke-width", 1)
            
    
            nodeUpdate.select("text")
            .style("fill-opacity", 1);
    
            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
            .duration(duration)
            .attr("transform", function (d) {
              return "translate(" + source.x + "," + source.y + ")";
            })
            .remove();
    
            nodeExit.select("rect")
            .attr("width", rectW)
            .attr("height", rectH)
            .attr("stroke", "black")
            
            nodeExit.select("text");
    
            // Update the linksâ€¦
            var link = svg.selectAll("path.link")
            .data(links, function (d) {
              return d.target.id;
            });
    
            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
            .attr("class", "link")
            .attr("x", rectW / 2)
            .attr("y", rectH / 2)
            .attr("d", function (d) {
              var o = {
                x: source.x0,
                y: source.y0
              };
              return diagonal({
                source: o,
                target: o
              });
            });
    
            // Transition links to their new position.
            link.transition()
            .duration(duration)
            .attr("d", diagonal);
    
            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
            .duration(duration)
            .attr("d", function (d) {
                var ii=source.y+100;
              var o = {
                x: source.x,
                y:ii 
              };
              return diagonal({
                source: o,
                target: o
              });
            })
            .remove();
    
            // Stash the old positions for transition.
            nodes.forEach(function (d) {
              d.x0 = d.x;
              d.y0 = d.y;
            });
          }
    
          // Toggle children on click.
          function click(d) {
            if (d.children) {
              d._children = d.children;
              d.children = null;
            } else {
              d.children = d._children;
              d._children = null;
            }
            update(d);
          }
    
          //Redraw for zoom
          function redraw() {
            //console.log("here", d3.event.translate, d3.event.scale);
            svg.attr("transform",
                     "translate(" + d3.event.translate + ")"
                     + " scale(" + d3.event.scale + ")");
          }
        
     
      
      //var org_chart = new dennisseah.OrgChart();
      //org_chart.setRoot();
     // org_chart.placeAt('content');
  
	
	</script>
</head>

<body class='sapUiBody'>
	<div id='content'></div>
    
        <!--MODAL WINDOW DIV-->
    <!--OVERLAY WHICH GIVES EFFECT OF MODAL WINDOW-->
    <div id='overlay' style="display:none"></div>
    <!--MODAL WINDOW DIV-->
    <div id='modal' style="display:none">
        <!--CONTAINER OF THE CONTENT-->
        <div id='content'>
           
        </div>
        <!--CLOSE BUTTON-->
        <a href='#' id='close'>close</a>
    </div>
    </div>
</body>
</html>